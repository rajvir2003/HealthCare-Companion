</main>

<button type="button" class="btn btn-dark chatbot-btn" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@fat"><img src="	https://jungleworks.com/wp-content/uploads/2021/04/1_9I6EIL5NG20A8se5afVmOg.gif" alt="" height="75"></button>

  <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content"> 
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="exampleModalLabel">Health-Assist AI Chatbot</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="chat-container">
            <div class="chat-messages" id="chat-messages"></div>
            <input type="text" id="user-input" class="user-input" placeholder="Type your message here...">
            <button onclick="sendMessage()" class="btn btn-primary send-button">Send</button>
          </div>
        </div>
      </div>
    </div>
  </div>


  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<script src="/select/jquery.min.js"></script>
<script src="/select/select2.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>
<script>
    $(document).ready(function () {
    // getting symptoms from backend
    $.get('/symptoms', function (data) {
        const symptomsFormatted = data.map(symptom => ({ id: symptom.ID, text: symptom.Name }));

        // Initialize Select2
        $('#Symptoms').select2({
            data: symptomsFormatted,
            placeholder: 'Search and select symptoms',
            multiple: true,
            allowClear: true,
        });
    });

    // Handle form submission
    $(document).ready(function() {
    // Handle form submission
    $("#diseaseForm").submit(function (event) {
        event.preventDefault(); 

        const selectedSymptoms = $("#Symptoms").val() || [];
        console.log("Selected Symptoms:", selectedSymptoms);

        const gender = $("#Gender").val();
        console.log(gender);
        const age = $("#age").val();
        console.log(age);

        $.ajax({
            type: 'POST',
            url: '/predict-disease',
            data: {
                symptoms: selectedSymptoms,
                gender: gender,
                yearOfBirth: age
            },
            dataType: 'json', 
            success: function (response) {
    console.log("Server response:", response);

    // Show diagnosis result
    const resultContainer = $('#resultContainer');
    resultContainer.empty();
    
    if (response.diseases && response.diseases.diseases && response.diseases.diseases.length > 0) {
        resultContainer.append('<h2 class="mt-4 p-2">Diagnosis Result:</h2>');
        const listGroup = $('<ol class="list-group list-group-numbered"></ol>');

        response.diseases.diseases.forEach((disease) => {
            listGroup.append(`<li class="list-group-item">${disease}</li>`);
        });
        // Append the constructed list to the result container
        resultContainer.append(listGroup);
    }

    // Show articles
    const articlesContainer = $('#articlesContainer');
    articlesContainer.empty();

    if (response.diseases.articles && response.diseases.articles.length > 0) {
        articlesContainer.append('<h2 class="mt-4 p-2">Related Articles:</h2>');
        const articlesList = $('<ul class="list-group"></ul>');

        response.diseases.articles.forEach((article) => {
            articlesList.append(`<li class="list-group-item"><a href="${article.link}" target="_blank">${article.title}</a><p>${article.description}</p></li>`);
        });
        // Append the constructed list to the articles container
        articlesContainer.append(articlesList);
    }
},
            error: function(error) {
                console.error("Error:", error);
                $('#resultContainer').html('<p>Error fetching diseases. Please try again.</p>');
            }
        });
    });
});

});

    async function sendMessage() {
      const userInput = document.getElementById('user-input').value;

      // Send user input to the server
      try {
        const response = await fetch('/api/query', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ inputs: userInput }),
        });

        const data = await response.json();

        // Append messages to the chat container
        const chatMessages = document.getElementById('chat-messages');
        const userMessage = `<div class="alert alert-primary" role="alert">You: ${userInput}</div>`;
        const botMessage = Array.isArray(data) && data.length > 0
          ? `<div class="alert alert-success" role="alert">Bot: ${data[0].generated_text}</div>`
          : '<div class="alert alert-warning" role="alert">Bot: No valid response from the server</div>';
        chatMessages.innerHTML += userMessage + botMessage;

        // Clear the user input field
        document.getElementById('user-input').value = '';
      } catch (error) {
        console.error('Error:', error);

        // Display an error message in the chat container
        const chatMessages = document.getElementById('chat-messages');
        const errorMessage = '<div class="alert alert-danger" role="alert">Error: Something went wrong</div>';
        chatMessages.innerHTML += errorMessage;
      }
    }

    document.addEventListener('DOMContentLoaded', function () {
    const appointmentModal = new bootstrap.Modal(document.getElementById('appointmentModal'));

    // Event listener for when the modal is about to be shown
    appointmentModal._element.addEventListener('show.bs.modal', function (event) {
      const button = event.relatedTarget;
      const doctorId = button.getAttribute('data-doctor-id');
      document.getElementById('doctor_id').value = doctorId;
    });
  });

// Use Bootstrap's Tab API
var myTabs = new bootstrap.Tab(document.getElementById('pending-tab'));
myTabs.show();

// Add event listeners for tab changes
document.getElementById('pending-tab').addEventListener('click', function () {
  myTabs.show();
});

document.getElementById('upcoming-tab').addEventListener('click', function () {
  myTabs.show();
});

document.getElementById('completed-tab').addEventListener('click', function () {
  myTabs.show();
});


</script>
</body>
</html>